{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "serviceFabricClusterNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Name of your cluster - Between 3 and 23 characters. Letters and numbers only"
      }
    },
    "serviceFabricReliabilityTier": {
      "type": "string",
      "defaultValue": "Bronze",
      "metadata": {
        "description": "Reliability tier of the Service Fabric Cluster"
      }
    },
    "keyVaultResourceGroupName": {
      "type": "string"
    },
    "keyVaultName": {
      "type": "string"
    },
    "clusterCertificateUrlValue": {
      "type": "string"
    },
    "clusterCertificateThumbprint": {
      "type": "string"
    },
    "applicationCertificateUrlValue": {
      "type": "string"
    },
    "applicationCertificateThumbprint": {
      "type": "string"
    },
    "aadTenantId": {
      "type": "string"
    },
    "aadClusterApplicationId": {
      "type": "string"
    },
    "aadClientApplicationId": {
      "type": "string"
    },
    "frontEndVMAdminUserName": {
      "type": "string",
      "metadata": {
        "description": "Remote desktop user Id for front end VMs."
      }
    },
    "frontEndVMAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Remote desktop user password for front end VMs."
      }
    },
    "backEndVMAdminUserName": {
      "type": "string",
      "metadata": {
        "description": "Remote desktop user Id for back end VMs."
      }
    },
    "backEndVMAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Remote desktop user password for back end VMs."
      }
    },
    "supportLogStorageAccountSku": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the support log storage account"
      }
    },
    "applicationDiagnosticsStorageAccountSku": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the application diagnostics storage account"
      }
    },
    "frontEndVMManagedDiskSku": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the VM Managed Disk"
      }
    },
    "frontEndVMManagedDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "metadata": {
        "description": "Size in GB of the VM Managed Disk"
      }
    },
    "backEndVMManagedDiskSku": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the VM Managed Disk"
      }
    },
    "backEndVMManagedDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "metadata": {
        "description": "Size in GB of the VM Managed Disk"
      }
    },
    "backEndServiceFabricNodeDurabilityLevel": {
      "type": "string",
      "defaultValue": "Bronze",
      "metadata": {
        "description": "Set the durability level of Primary Service Fabric Node Type."
      }
    },
    "backEndServiceFabricNodeVMSku": {
      "type": "string"
    },
    "backEndServiceFabricNodeInstanceCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Instance count for node type"
      }
    },
    "frontEndServiceFabricNodeDurabilityLevel": {
      "type": "string",
      "defaultValue": "Bronze",
      "metadata": {
        "description": "Set the durability level of FrontEnd Service Fabric Node Type."
      }
    },
    "frontEndServiceFabricNodeVMSku": {
      "type": "string"
    },
    "frontEndServiceFabricNodeInstanceCount": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Instance count for node type"
      }
    }
  },
  "variables": {
    "serviceFabricClusterName": "[concat(parameters('serviceFabricClusterNamePrefix'), uniqueString(resourceGroup().id))]",

    "keyVaultId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('keyVaultResourceGroupName'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]",
    "clusterCertificateStoreValue": "My",
    "applicationCertificateStoreValue": "My",

    "vmImagePublisher": "MicrosoftWindowsServer",
    "vmImageOffer": "WindowsServer",
    "vmImageSku": "2012-R2-Datacenter",
    "vmImageVersion": "latest",

    "virtualNetworkName": "[concat(parameters('serviceFabricClusterNamePrefix'), '-vnet')]",
    "virtualNetworkID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "virtualNetworkAddressPrefix": "10.0.0.0/16",

    "supportLogStorageAccountName": "[toLower(concat('sflogs', uniqueString(resourceGroup().id)))]",

    "serviceFabricNodeApplicationStartPort": 20000,
    "serviceFabricNodeApplicationEndPort": 30000,
    "serviceFabricNodeEphemeralStartPort": 49152,
    "serviceFabricNodeEphemeralEndPort": 65534,
    "serviceFabricNodeTcpGatewayPort": 19000,
    "serviceFabricNodeHttpGatewayPort": 19080,

    "backEndServiceFabricNodeTypeName": "backend",
    "backEndServiceFabricNodeSubnetName": "[concat(variables('backEndServiceFabricNodeTypeName'), '-nodes-subnet')]",
    "backEndServiceFabricNodeSubnetPrefix": "10.0.0.0/24",
    "backEndServiceFabricNodeLoadBalancerName": "[concat(variables('backEndServiceFabricNodeTypeName'), '-nodes-lb')]",
    "backEndServiceFabricNodeLoadBalancerID": "[resourceId('Microsoft.Network/loadBalancers', variables('backEndServiceFabricNodeLoadBalancerName'))]",
    "backEndServiceFabricNodeLoadBalancerIPConfigID": "[concat(variables('backEndServiceFabricNodeLoadBalancerID'),'/frontendIPConfigurations/LoadBalancerIPConfig')]",
    "backEndServiceFabricNodeLoadBalancerBEAddressPoolID": "[concat(variables('backEndServiceFabricNodeLoadBalancerID'),'/backendAddressPools/LoadBalancerBEAddressPool')]",
    "backEndServiceFabricNodeLoadBalancerPIPName": "[concat(variables('backEndServiceFabricNodeLoadBalancerName'), '-pip')]",
    "backEndServiceFabricNodeNICName": "[concat(variables('backEndServiceFabricNodeTypeName'), '-nodes-nic')]",
    "backEndServiceFabricNodeVMScaleSetName": "[concat(variables('backEndServiceFabricNodeTypeName'), '-nodes-vmscaleset')]",

    "frontEndServiceFabricNodeTypeName": "frontend",
    "frontEndServiceFabricNodeHttpsEndpointPort": 443,
    "frontEndServiceFabricNodeSubnetName": "[concat(variables('frontEndServiceFabricNodeTypeName'), '-nodes-subnet')]",
    "frontEndServiceFabricNodeSubnetPrefix": "10.0.1.0/24",
    "frontEndServiceFabricNodeLoadBalancerName": "[concat(variables('frontEndServiceFabricNodeTypeName'), '-nodes-lb')]",
    "frontEndServiceFabricNodeLoadBalancerID": "[resourceId('Microsoft.Network/loadBalancers', variables('frontEndServiceFabricNodeLoadBalancerName'))]",
    "frontEndServiceFabricNodeLoadBalancerIPConfigID": "[concat(variables('frontEndServiceFabricNodeLoadBalancerID'),'/frontendIPConfigurations/LoadBalancerIPConfig')]",
    "frontEndServiceFabricNodeLoadBalancerBEAddressPoolID": "[concat(variables('frontEndServiceFabricNodeLoadBalancerID'),'/backendAddressPools/LoadBalancerBEAddressPool')]",
    "frontEndServiceFabricNodeLoadBalancerPIPName": "[concat(variables('frontEndServiceFabricNodeLoadBalancerName'), '-pip')]",
    "frontEndServiceFabricNodeNICName": "[concat(variables('frontEndServiceFabricNodeTypeName'), '-nodes-nic')]",
    "frontEndServiceFabricNodeVMScaleSetName": "[concat(variables('frontEndServiceFabricNodeTypeName'), '-nodes-vmscaleset')]"
  },
  "resources": [
    {
      "apiVersion": "2016-01-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('supportLogStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [],
      "properties": {},
      "kind": "Storage",
      "sku": {
        "name": "[parameters('supportLogStorageAccountSku')]"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "serviceFabricClusterName": "[variables('serviceFabricClusterName')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('virtualNetworkAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('backEndServiceFabricNodeSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('backEndServiceFabricNodeSubnetPrefix')]"
            }
          },
          {
            "name": "[variables('frontEndServiceFabricNodeSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('frontEndServiceFabricNodeSubnetPrefix')]"
            }
          }
        ]
      },
      "tags": {
        "resourceType": "Service Fabric",
        "serviceFabricClusterName": "[variables('serviceFabricClusterName')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('backEndServiceFabricNodeLoadBalancerPIPName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('serviceFabricClusterName')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "serviceFabricClusterName": "[variables('serviceFabricClusterName')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('backEndServiceFabricNodeLoadBalancerName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('backEndServiceFabricNodeLoadBalancerPIPName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerIPConfig",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('backEndServiceFabricNodeLoadBalancerPIPName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBEAddressPool",
            "properties": {}
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('backEndServiceFabricNodeLoadBalancerBEAddressPoolID')]"
              },
              "backendPort": "[variables('serviceFabricNodeTcpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('backEndServiceFabricNodeLoadBalancerIPConfigID')]"
              },
              "frontendPort": "[variables('serviceFabricNodeTcpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('backEndServiceFabricNodeLoadBalancerID'),'/probes/FabricGatewayProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('backEndServiceFabricNodeLoadBalancerBEAddressPoolID')]"
              },
              "backendPort": "[variables('serviceFabricNodeHttpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('backEndServiceFabricNodeLoadBalancerIPConfigID')]"
              },
              "frontendPort": "[variables('serviceFabricNodeHttpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('backEndServiceFabricNodeLoadBalancerID'), '/probes/FabricHttpGatewayProbe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "FabricGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[variables('serviceFabricNodeTcpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "FabricHttpGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[variables('serviceFabricNodeHttpGatewayPort')]",
              "protocol": "tcp"
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "LoadBalancerBEAddressNatPool",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[variables('backEndServiceFabricNodeLoadBalancerIPConfigID')]"
              },
              "frontendPortRangeEnd": "4500",
              "frontendPortRangeStart": "3389",
              "protocol": "tcp"
            }
          }
        ]
      },
      "tags": {
        "resourceType": "Service Fabric",
        "serviceFabricClusterName": "[variables('serviceFabricClusterName')]"
      }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('backEndServiceFabricNodeVMScaleSetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('backEndServiceFabricNodeLoadBalancerName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]"
      ],
      "properties": {
        "overprovision": "false",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat(variables('backEndServiceFabricNodeTypeName'),'_ServiceFabricNode')]",
                "properties": {
                  "type": "ServiceFabricNode",
                  "autoUpgradeMinorVersion": false,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key2]"
                  },
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "settings": {
                    "clusterEndpoint": "[reference(variables('serviceFabricClusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[variables('backEndServiceFabricNodeTypeName')]",
                    "dataPath": "D:\\\\SvcFab",
                    "durabilityLevel": "[parameters('backendServiceFabricNodeDurabilityLevel')]",
                    "certificate": {
                      "thumbprint": "[parameters('clusterCertificateThumbprint')]",
                      "x509StoreName": "[variables('clusterCertificateStoreValue')]"
                    }
                  },
                  "typeHandlerVersion": "1.0"
                }
              }             
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('backEndServiceFabricNodeNICName')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[variables('backEndServiceFabricNodeNICName')]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('backEndServiceFabricNodeLoadBalancerBEAddressPoolID')]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(variables('backEndServiceFabricNodeLoadBalancerID'),'/inboundNatPools/LoadBalancerBEAddressNatPool')]"
                          }
                        ],
                        "subnet": {
                          "id": "[concat(variables('virtualNetworkID'),'/subnets/',variables('backEndServiceFabricNodeSubnetName'))]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('backendVMAdminPassword')]",
            "adminUsername": "[parameters('backendVMAdminUserName')]",
            "computerNamePrefix": "[variables('backEndServiceFabricNodeTypeName')]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[variables('keyVaultId')]"
                },
                "vaultCertificates": [
                  {
                    "certificateStore": "[variables('clusterCertificateStoreValue')]",
                    "certificateUrl": "[parameters('clusterCertificateUrlValue')]"
                  }
                ]
              }
            ]
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('vmImagePublisher')]",
              "offer": "[variables('vmImageOffer')]",
              "sku": "[variables('vmImageSku')]",
              "version": "[variables('vmImageVersion')]"
            },
            "osDisk": {
              ,
              "diskSizeGB": "[parameters('backEndVMManagedDiskSize')]",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[parameters('backEndVMManagedDiskSku')]"
              }
            }
          }
        }
      },
      "sku": {
        "name": "[parameters('backEndServiceFabricNodeVMSku')]",
        "capacity": "[parameters('backEndServiceFabricNodeInstanceCount')]",
        "tier": "Standard"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "serviceFabricClusterName": "[variables('serviceFabricClusterName')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('frontEndServiceFabricNodeLoadBalancerPIPName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('serviceFabricClusterName'),'-', variables('frontEndServiceFabricNodeTypeName'))]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "serviceFabricClusterName": "[variables('serviceFabricClusterName')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('frontEndServiceFabricNodeLoadBalancerName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('frontEndServiceFabricNodeLoadBalancerPIPName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerIPConfig",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('frontEndServiceFabricNodeLoadBalancerPIPName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBEAddressPool",
            "properties": {}
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('frontEndServiceFabricNodeLoadBalancerBEAddressPoolID')]"
              },
              "backendPort": "[variables('serviceFabricNodeTcpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndServiceFabricNodeLoadBalancerIPConfigID')]"
              },
              "frontendPort": "[variables('serviceFabricNodeTcpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('frontEndServiceFabricNodeLoadBalancerID'),'/probes/FabricGatewayProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('frontEndServiceFabricNodeLoadBalancerBEAddressPoolID')]"
              },
              "backendPort": "[variables('serviceFabricNodeHttpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndServiceFabricNodeLoadBalancerIPConfigID')]"
              },
              "frontendPort": "[variables('serviceFabricNodeHttpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('frontEndServiceFabricNodeLoadBalancerID'),'/probes/FabricHttpGatewayProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBHttpsRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('frontEndServiceFabricNodeLoadBalancerBEAddressPoolID')]"
              },
              "backendPort": "[variables('frontEndServiceFabricNodeHttpsEndpointPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndServiceFabricNodeLoadBalancerIPConfigID')]"
              },
              "frontendPort": "[variables('frontEndServiceFabricNodeHttpsEndpointPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('frontEndServiceFabricNodeLoadBalancerID'),'/probes/HttpsProbe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "FabricGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[variables('serviceFabricNodeTcpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "FabricHttpGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[variables('serviceFabricNodeHttpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "HttpsProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[variables('frontEndServiceFabricNodeHttpsEndpointPort')]",
              "protocol": "tcp"
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "LoadBalancerBEAddressNatPool",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndServiceFabricNodeLoadBalancerIPConfigID')]"
              },
              "frontendPortRangeEnd": "4500",
              "frontendPortRangeStart": "3389",
              "protocol": "tcp"
            }
          }
        ]
      },
      "tags": {
        "resourceType": "Service Fabric",
        "serviceFabricClusterName": "[variables('serviceFabricClusterName')]"
      }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('frontEndServiceFabricNodeVMScaleSetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('frontEndServiceFabricNodeLoadBalancerName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]"
      ],
      "properties": {
        "overprovision": false,
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat(variables('frontEndServiceFabricNodeTypeName'),'_ServiceFabricNode')]",
                "properties": {
                  "type": "ServiceFabricNode",
                  "autoUpgradeMinorVersion": false,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key2]"
                  },
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "settings": {
                    "clusterEndpoint": "[reference(variables('serviceFabricClusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[variables('frontEndServiceFabricNodeTypeName')]",
                    "dataPath": "D:\\\\SvcFab",
                    "durabilityLevel": "[parameters('frontEndServiceFabricNodeDurabilityLevel')]",
                    "certificate": {
                      "thumbprint": "[parameters('clusterCertificateThumbprint')]",
                      "x509StoreName": "[variables('clusterCertificateStoreValue')]"
                    }
                  },
                  "typeHandlerVersion": "1.0"
                }
              }             
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('frontEndServiceFabricNodeNICName')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[variables('frontEndServiceFabricNodeNICName')]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('frontEndServiceFabricNodeLoadBalancerBEAddressPoolID')]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(variables('frontEndServiceFabricNodeLoadBalancerID'),'/inboundNatPools/LoadBalancerBEAddressNatPool')]"
                          }
                        ],
                        "subnet": {
                          "id": "[concat(variables('virtualNetworkID'),'/subnets/',variables('frontEndServiceFabricNodeSubnetName'))]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('frontEndVMAdminPassword')]",
            "adminUsername": "[parameters('frontEndVMAdminUserName')]",
            "computernamePrefix": "[variables('frontEndServiceFabricNodeTypeName')]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[variables('keyVaultId')]"
                },
                "vaultCertificates": [
                  {
                    "certificateStore": "[variables('clusterCertificateStoreValue')]",
                    "certificateUrl": "[parameters('clusterCertificateUrlValue')]"
                  },
                  {
                    "certificateStore": "[variables('applicationCertificateStoreValue')]",
                    "certificateUrl": "[parameters('applicationCertificateUrlValue')]"
                  }
                ]
              }
            ]
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('vmImagePublisher')]",
              "offer": "[variables('vmImageOffer')]",
              "sku": "[variables('vmImageSku')]",
              "version": "[variables('vmImageVersion')]"
            },
            "osDisk": {
              "diskSizeGB": "[parameters('frontEndVMManagedDiskSize')]",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[parameters('frontEndVMManagedDiskSku')]"
              }
            }
          }
        }
      },
      "sku": {
        "name": "[parameters('frontEndServiceFabricNodeVMSku')]",
        "capacity": "[parameters('frontEndServiceFabricNodeInstanceCount')]",
        "tier": "Standard"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "serviceFabricClusterName": "[variables('serviceFabricClusterName')]"
      }
    },
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.ServiceFabric/clusters",
      "name": "[variables('serviceFabricClusterName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]"
      ],
      "properties": {
        "certificate": {
          "thumbprint": "[parameters('clusterCertificateThumbprint')]",
          "x509StoreName": "[variables('clusterCertificateStoreValue')]"
        },
        "azureActiveDirectory": {
          "tenantId": "[parameters('aadTenantId')]",
          "clusterApplication": "[parameters('aadClusterApplicationId')]",
          "clientApplication": "[parameters('aadClientApplicationId')]"
        },
        "clientCertificateCommonNames": [],
        "clientCertificateThumbprints": [],
        "clusterState": "Default",
        "diagnosticsStorageAccountConfig": {
          "blobEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName')), '2016-01-01').primaryEndpoints.blob]",
          "protectedAccountKeyName": "StorageAccountKey1",
          "queueEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName')), '2016-01-01').primaryEndpoints.queue]",
          "storageAccountName": "[variables('supportLogStorageAccountName')]",
          "tableEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName')), '2016-01-01').primaryEndpoints.table]"
        },
        "fabricSettings": [
          {
            "parameters": [
              {
                "name": "ClusterProtectionLevel",
                "value": "EncryptAndSign"
              }
            ],
            "name": "Security"
          }
        ],
        "managementEndpoint": "[concat('https://',reference(variables('backEndServiceFabricNodeLoadBalancerPIPName')).dnsSettings.fqdn,':',variables('serviceFabricNodeHttpGatewayPort'))]",
        "nodeTypes": [
          {
            "name": "[variables('backEndServiceFabricNodeTypeName')]",
            "applicationPorts": {
              "endPort": "[variables('serviceFabricNodeApplicationEndPort')]",
              "startPort": "[variables('serviceFabricNodeApplicationStartPort')]"
            },
            "clientConnectionEndpointPort": "[variables('serviceFabricNodeTcpGatewayPort')]",
            "durabilityLevel": "[parameters('backEndServiceFabricNodeDurabilityLevel')]",
            "ephemeralPorts": {
              "endPort": "[variables('serviceFabricNodeEphemeralEndPort')]",
              "startPort": "[variables('serviceFabricNodeEphemeralStartPort')]"
            },
            "httpGatewayEndpointPort": "[variables('serviceFabricNodeHttpGatewayPort')]",
            "isPrimary": true,
            "vmInstanceCount": "[parameters('backEndServiceFabricNodeInstanceCount')]"
          },
          {
            "name": "[variables('frontEndServiceFabricNodeTypeName')]",
            "applicationPorts": {
              "endPort": "[variables('serviceFabricNodeApplicationEndPort')]",
              "startPort": "[variables('serviceFabricNodeApplicationStartPort')]"
            },
            "clientConnectionEndpointPort": "[variables('serviceFabricNodeTcpGatewayPort')]",
            "durabilityLevel": "[parameters('frontEndServiceFabricNodeDurabilityLevel')]",
            "ephemeralPorts": {
              "endPort": "[variables('serviceFabricNodeEphemeralEndPort')]",
              "startPort": "[variables('serviceFabricNodeEphemeralStartPort')]"
            },
            "httpGatewayEndpointPort": "[variables('serviceFabricNodeHttpGatewayPort')]",
            "isPrimary": false,
            "vmInstanceCount": "[parameters('frontEndServiceFabricNodeInstanceCount')]"
          }
        ],
        "provisioningState": "Default",
        "reliabilityLevel": "[parameters('serviceFabricReliabilityTier')]",
        "upgradeMode": "Automatic",
        "vmImage": "Windows"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "serviceFabricClusterName": "[variables('serviceFabricClusterName')]"
      }
    }
  ],
  "outputs": {
  }
}
